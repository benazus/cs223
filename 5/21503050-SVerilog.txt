`timescale 1ns / 1ps

module MooreFSM(input logic clk, reset, next,
        input logic [1:0] dd,
        output logic [6:0] fsm_output);
    
    typedef enum logic [2:0] {S0,S1,S2,S3,S4,S5,S6} statetype;
    statetype [2:0] currentState, nextState;
    
    // State Register
    always_ff@(posedge clk)
        if(reset)
            currentState <= S0;
        else if(next)
            currentState <= nextState;
        else
            currentState <= currentState;
    
    // Output Logic
    always_comb
        case(currentState)
            3'b000: fsm_output = 7'b0000001;
            3'b001: fsm_output = 7'b0000010;
            3'b010: fsm_output = 7'b0000100;
            3'b011: fsm_output = 7'b0001000;
            3'b100: fsm_output = 7'b0010000;
            3'b101: fsm_output = 7'b0100000;
            3'b110: fsm_output = 7'b1000000;
            default: fsm_output = 7'b0000000;
        endcase
    
    // Next State Logic
    always_comb
        if(dd == 2'b00) // Input = 00
            begin
                case(currentState)
                    3'b000: nextState = currentState;
                    3'b001: nextState = currentState;
                    3'b010: nextState = currentState;
                    3'b011: nextState = currentState;
                    3'b100: nextState = currentState;
                    3'b101: nextState = currentState;
                    3'b110: nextState = currentState;
                    default: nextState = currentState;
                endcase
            end
        else if(dd == 2'b01) // Input = 01
            begin
                case(currentState)
                    3'b000: nextState = 3'b010;
                    3'b001: nextState = 3'b100;
                    3'b010: nextState = 3'b110;
                    3'b011: nextState = 3'b010;
                    3'b100: nextState = 3'b010;
                    3'b101: nextState = 3'b010;
                    3'b110: nextState = 3'b010;
                    default: nextState = currentState;
                endcase
            end
        else if(dd == 2'b10) // Input = 10
            begin
                case(currentState)
                    3'b000: nextState = 3'b001;
                    3'b001: nextState = 3'b011;
                    3'b010: nextState = 3'b101;
                    3'b011: nextState = 3'b001;
                    3'b100: nextState = 3'b001;
                    3'b101: nextState = 3'b001;
                    3'b110: nextState = 3'b001;
                    default: nextState = currentState;
                endcase
            end
        else if(dd == 2'b11) // Input = 11
            begin
                case(currentState)
                    3'b000: nextState = currentState;
                    3'b001: nextState = currentState;
                    3'b010: nextState = currentState;
                    3'b011: nextState = currentState;
                    3'b100: nextState = currentState;
                    3'b101: nextState = currentState;
                    3'b110: nextState = currentState;
                    default: nextState = currentState;
                endcase
            end
        else
            nextState <= S0;
endmodule







`timescale 1ns / 1ps

module MealyFSM(input logic clk, reset, next,
        input logic [1:0] dd,
        output logic [6:0] fsm_output);

    typedef enum logic [2:0] {S0,S1,S2,S3,S4,S5,S6} statetype;
    statetype [2:0] currentState, nextState;
    
    logic [2:0] out;
    
    // State Register
    always_ff@(posedge clk)
        if(reset)
            currentState <= S0;
        else if(next)
            currentState <= nextState;
        else
            currentState <= currentState;
            
    // Output Logic
    always_comb
        begin
            case(currentState)
                3'b000: fsm_output = 7'b0000001;
                3'b001: fsm_output = 7'b0000010;
                3'b010: fsm_output = 7'b0000100;
                3'b011: fsm_output = 7'b0001000;
                3'b100: fsm_output = 7'b0010000;
                3'b101: fsm_output = 7'b0100000;
                3'b110: fsm_output = 7'b1000000;
                default: fsm_output = 7'b0000000;
            endcase
            
            out <= currentState;
        end
    // Next State Logic
    always_comb
        if(dd == 2'b00 && out == currentState) // Input = 00
            begin
                case(currentState)
                    3'b000: nextState = currentState;
                    3'b001: nextState = currentState;
                    3'b010: nextState = currentState;
                    3'b011: nextState = currentState;
                    3'b100: nextState = currentState;
                    3'b101: nextState = currentState;
                    3'b110: nextState = currentState;
                    default: nextState = currentState;
                endcase
            end
        else if(dd == 2'b01 && out == currentState) // Input = 01
            begin
                case(currentState)
                    3'b000: nextState = 3'b010;
                    3'b001: nextState = 3'b100;
                    3'b010: nextState = 3'b110;
                    3'b011: nextState = 3'b010;
                    3'b100: nextState = 3'b010;
                    3'b101: nextState = 3'b010;
                    3'b110: nextState = 3'b010;
                    default: nextState = currentState;
                endcase
            end
        else if(dd == 2'b10 && out == currentState) // Input = 10
            begin
                case(currentState)
                    3'b000: nextState = 3'b001;
                    3'b001: nextState = 3'b011;
                    3'b010: nextState = 3'b101;
                    3'b011: nextState = 3'b001;
                    3'b100: nextState = 3'b001;
                    3'b101: nextState = 3'b001;
                    3'b110: nextState = 3'b001;
                    default: nextState = currentState;
                endcase
            end
        else if(dd == 2'b11 && out == currentState) // Input = 11
            begin
                case(currentState)
                    3'b000: nextState = currentState;
                    3'b001: nextState = currentState;
                    3'b010: nextState = currentState;
                    3'b011: nextState = currentState;
                    3'b100: nextState = currentState;
                    3'b101: nextState = currentState;
                    3'b110: nextState = currentState;
                    default: nextState = currentState;
                endcase
            end
        else
            nextState <= S0;        
endmodule






`timescale 1ns / 1ps

module MooreSim();

logic clk,reset,next;
logic [1:0] dd;
logic [6:0] out;

MooreFSM mfsm(clk,reset,next,dd,out);


always
begin
clk = ~clk; #5;
end

initial
begin
clk = 1; #10;
reset = 1; #10;
reset = 0; #10;

next = 1; # 200;

dd = 2'b01; #10;
dd = 2'b01; #10;
dd = 2'b01; #10;

reset = 1; #10;
reset = 0; #10;

dd = 2'b10; #10;
dd = 2'b10; #10;
dd = 2'b10; #10;

reset = 1; #10;
reset = 0; #10;

dd = 2'b01; #10;
dd = 2'b01; #10;
dd = 2'b01; #10;

reset = 1; #10;
reset = 0; #10;

dd = 2'b10; #10;
dd = 2'b10; #10;
dd = 2'b10; #10;
end

endmodule





`timescale 1ns / 1ps

module MealySim();

logic clk,reset,next;
logic [1:0] dd;
logic [6:0] out;

MealyFSM mfsm(clk,reset,next,dd,out);


always
begin
clk = ~clk; #5;
end

initial
begin
clk = 1; #10;
reset = 1; #10;
reset = 0; #10;

next = 1; # 200;

dd = 2'b01; #10;
dd = 2'b01; #10;
dd = 2'b01; #10;

reset = 1; #10;
reset = 0; #10;

dd = 2'b10; #10;
dd = 2'b10; #10;
dd = 2'b10; #10;

reset = 1; #10;
reset = 0; #10;

dd = 2'b01; #10;
dd = 2'b01; #10;
dd = 2'b01; #10;

reset = 1; #10;
reset = 0; #10;

dd = 2'b10; #10;
dd = 2'b10; #10;
dd = 2'b10; #10;
end

endmodule





# Clock signal
set_property PACKAGE_PIN W5 [get_ports clk]       
set_property IOSTANDARD LVCMOS33 [get_ports clk]  
create_clock -add -name sys_clk_pin -period 10.00 -waveform {0 5} [get_ports clk]
 
# Switches
set_property PACKAGE_PIN V17 [get_ports {reset}]     
    set_property IOSTANDARD LVCMOS33 [get_ports {reset}] 
     
set_property PACKAGE_PIN V16 [get_ports {dd[0]}]     
    set_property IOSTANDARD LVCMOS33 [get_ports {dd[0]}] 
     
set_property PACKAGE_PIN W16 [get_ports {dd[1]}]     
    set_property IOSTANDARD LVCMOS33 [get_ports {dd[1]}]
    
set_property PACKAGE_PIN W17 [get_ports {next}]     
    set_property IOSTANDARD LVCMOS33 [get_ports {next}]


set_property PACKAGE_PIN U16 [get_ports {fsm_output[0]}]  	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {fsm_output[0]}] 
set_property PACKAGE_PIN E19 [get_ports {fsm_output[1]}]  	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {fsm_output[1]}] 
set_property PACKAGE_PIN U19 [get_ports {fsm_output[2]}]  	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {fsm_output[2]}] 
set_property PACKAGE_PIN V19 [get_ports {fsm_output[3]}]  	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {fsm_output[3]}] 
set_property PACKAGE_PIN W18 [get_ports {fsm_output[4]}]  	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {fsm_output[4]}] 
set_property PACKAGE_PIN U15 [get_ports {fsm_output[5]}]  	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {fsm_output[5]}] 
set_property PACKAGE_PIN U14 [get_ports {fsm_output[6]}]  	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {fsm_output[6]}] 